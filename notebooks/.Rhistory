packrat::status()
#combine site info
#row bind (append) all site data tables. Consistent format. Expected number is
sites <- rbind(site.midas, site.tame, site.tmu)
View(sites)
nrow(site.midas) + nrow(site.tame) + nrow(site.tmu) == nrow(sites)
#read in the actual data obtained from `webtri.sh
readings <- fread("../combo.csv", stringsAsFactor=F)
tail(readings)
#tail(readings)
dim(readings)
# number of columns in constituent csvs
test <- read.csv('..\\\\data\\\\36.csv')
ncol(test) #24
setdiff(colnames(readings), colnames(test)) # 'site_id - I assume the bash script creates this column? "
View(readings)
names(readings)
gc()
# tidy up
remove(test)
gc()
# cleansing site columns --------------------------------------------------
# unwrap embedded site meta info
#`name` column contains extra `;` delimited info.
# example `ex`:
ex <- sites[sample(1:nrow(sites), 10), ]
View(ex)
m <- regexpr("(([A-Za-z]+)bound)|([A-Za-z\\\\-]+wise)", x, perl=T)
m <- regexpr(ex$name, "(([A-Za-z]+)bound)|([A-Za-z\\\\-]+wise)", x, perl=T)
m <- regexpr("(([A-Za-z]+)bound)|([A-Za-z\\\\-]+wise)", ex$name, perl=T)
length(m)
?regexpr
ex$name
m
str(m)
grep(sites$name, "wise")
grepl(sites$name, "wise")
sapply(sites$name[1:1000], FUN = grepl("wise"))
sapply(sites$name[1:1000], FUN = grepl("wise", sites$name[1:1000]))
regmatches(ex$name, m)
tolower(regmatches(ex$name, m))
matches <- tolower(regmatches(ex$name, m))
matches
ifelse(m > 0, 1, 0)
cumsum(ifelse(m > 0, 1, 0))
ifelse(m > 0, cumsum(ifelse(m > 0, 1, 0)), NA)
matches[ifelse(m > 0, cumsum(ifelse(m > 0, 1, 0)), NA)]
regmatches(ex$name, m)
m
ex$name
regmatches(ex$name, m)
str(matches)
m > 0, 1, 0
ifelse(
m > 0, 1, 0)
m
m
str(m)
cumsum(
ifelse(
m > 0, 1, 0) # output is 1 0 1 1 1 1 1 1 1 1. If any negative indexes caused by empty character strings, then overwite to 0
)
ifelse(
m > 0, cumsum(
ifelse(
m > 0, 1, 0) # ifelse output is 1 0 1 1 1 1 1 1 1 1. If any negative indexes caused by empty character strings, then overwite to 0
), # cumsum output is 1 1 2 3 4 5 6 7 8 9. cumulative sums the above vector
NA)
matches[ifelse(
m > 0, cumsum(
ifelse(
m > 0, 1, 0) # ifelse output is 1 0 1 1 1 1 1 1 1 1. If any negative indexes caused by empty character strings, then overwite to 0
), # cumsum output is 1 1 2 3 4 5 6 7 8 9. cumulative sums the above vector
NA)# ifelse output is 1 NA  2  3  4  5  6  7  8  9. This has replaced 0s with NAs.
]
matches
tolower(regmatches(ex$name, m))
matches[ifelse(
m > 0, cumsum(
ifelse(
m > 0, 1, 0) # ifelse output is 1 0 1 1 1 1 1 1 1 1. If any negative indexes caused by empty character strings, then overwite to 0
), # cumsum output is 1 1 2 3 4 5 6 7 8 9. cumulative sums the above vector
NA)# ifelse output is 1 NA  2  3  4  5  6  7  8  9. This has replaced 0s with NAs.
]
matches
m
grepl(pattern = "(([A-Za-z]+)bound)|([A-Za-z\\\\-]+wise)", x = ex$name)
grep(pattern = "(([A-Za-z]+)bound)|([A-Za-z\\\\-]+wise)", x = ex$name)
ex$name
library(stringr)
str_extract(ex$name, "(([A-Za-z]+)bound)|([A-Za-z\\\\-]+wise)")
str_extract(sites$name, "(([A-Za-z]+)bound)|([A-Za-z\\\\-]+wise)")
direction <- function(x){str_extract(x, "(([A-Za-z]+)bound)|([A-Za-z\\\\-]+wise)")}
direction(ex$name)
direction <- function(x) {
# RLe - find the location of the direction string match within the name vector
m <- regexpr("(([A-Za-z]+)bound)|([A-Za-z\\\\-]+wise)", x, perl = TRUE)
# RLe - lower case the direction strings to a character vector
matches <- tolower(regmatches(x, m))
# matches does not include NA. do cumsum trick to map NAs:
# m is a vector of match positions, where -nv = no match found.
# cumsum over sign of m where -1 replaced with 0, so that non-matches are repeated.
# then replace repeated with NA, as to get matches same length as input.
# RLe - this bit is to remove NAs
matches[ifelse(
m > 0, cumsum(
ifelse(
m > 0, 1, 0) # ifelse output is 1 0 1 1 1 1 1 1 1 1. If any negative indexes caused by empty character strings, then overwite to 0
), # cumsum output is 1 1 2 3 4 5 6 7 8 9. cumulative sums the above vector
NA)# ifelse output is 1 NA  2  3  4  5  6  7  8  9. This has replaced 0s with NAs.
]
}
direction(ex$name)
direction <- function(x){str_extract(x, "(([A-Za-z]+)bound)|([A-Za-z\\\\-]+wise)")}
source('~/road-data-dump/notebooks/prep.R', echo=TRUE)
#NA'anti-clockwise''westbound''southbound''westbound''southbound''westbound''westbound''westbound''northbound'
sites$direction <- direction(sites$name)
View(sites)
table(sites$direction) # i don't believe it's a problem that the extracted directions from sites isn't the same as ex
direction <- function(x){
#ensure output is lowered
tolower(
# extract all pattern matches
str_extract(x, "(([A-Za-z]+)bound)|([A-Za-z\\\\-]+wise)")
)
}
#NA'anti-clockwise''westbound''southbound''westbound''southbound''westbound''westbound''westbound''northbound'
sites$direction <- direction(sites$name)
table(sites$direction) # i don't believe it's a problem that the extracted directions from sites isn't the same as ex
str_replace_all(string = sites$direction, "souhbound" <- "southbound")
str_replace_all(string = sites$direction, pattern = "souhbound", replacement = "southbound")
sites$direction <- str_replace_all(
sites$direction, pattern = "souhbound", replacement = "southbound")
table(sites$direction)
m <- regexpr("GPS Ref: [0-9]+;[0-9]+", ex$name, perl=T)
m
matches <- matrix(unlist(strsplit(sub("^.*: ", "", regmatches(x, m)), ";")), ncol=2, byrow=T)
matches <- matrix(unlist(strsplit(sub("^.*: ", "", regmatches(ex$name, m)), ";")), ncol=2, byrow=T)
matches
regmatches(ex$name, m)
sub("^.*: ", "", regmatches(ex$name, m))
strsplit(sub("^.*: ", "", regmatches(ex$name, m)), ";")
unlist(strsplit(sub("^.*: ", "", regmatches(ex$name, m)), ";"))
matrix(unlist(strsplit(sub("^.*: ", "", regmatches(ex$name, m)), ";")), ncol=2, byrow=T)
matches <- matches[ifelse(m > 0, cumsum(ifelse(m > 0, 1, 0)), NA), ]
matches
m
colnames(matches) <- c("easting", "northing")
matches
tr_extract(ex$name, "GPS Ref: [0-9]+;[0-9]+")
str_extract(ex$name, "GPS Ref: [0-9]+;[0-9]+")
str_remove_all("GPS Ref: "
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(ex$name, "GPS Ref: [0-9]+;[0-9]+")
)
)
str_remove_all("GPS Ref: "
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(ex$name, "GPS Ref: [0-9]+;[0-9]+")
)
)
str_remove_all("GPS Ref: ",
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(ex$name, "GPS Ref: [0-9]+;[0-9]+")
)
)
!str_remove_all("GPS Ref: ",
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(ex$name, "GPS Ref: [0-9]+;[0-9]+")
)
)
!(str_remove_all("GPS Ref: ",
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(ex$name, "GPS Ref: [0-9]+;[0-9]+")
)
))
str_remove_all(-"GPS Ref: ",
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(ex$name, "GPS Ref: [0-9]+;[0-9]+")
)
)
str_remove_all("GPS Ref: ",
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(ex$name, "GPS Ref: [0-9]+;[0-9]+")
)
)
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(ex$name, "GPS Ref: [0-9]+;[0-9]+")
)
str_remove_all("gps ref: ",
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(ex$name, "GPS Ref: [0-9]+;[0-9]+")
)
)
str_remove_all(
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(ex$name, "GPS Ref: [0-9]+;[0-9]+")
), "gps ref: "
)
strpslit(
str_remove_all(
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(ex$name, "GPS Ref: [0-9]+;[0-9]+")
), "gps ref: "
), ";"
)
strsplit(
str_remove_all(
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(ex$name, "GPS Ref: [0-9]+;[0-9]+")
), "gps ref: "
), ";"
)
easting_northing <- function(x){
# split by ";" delimeter
strsplit(
# remove all patterns "gps ref: "
str_remove_all(
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(x, "GPS Ref: [0-9]+;[0-9]+")
), "gps ref: "
), ";"
)
}
# new easting_northing function ------------------------------------------------------------
easting_northing(ex$name)
# new easting_northing function ------------------------------------------------------------
test$1, test$2 <- easting_northing(ex$name)
# new easting_northing function ------------------------------------------------------------
str(easting_northing(ex$name))
View(ex)
easting_northing <- function(x){
matches <- matrix(
unlist(
# split by ";" delimeter
strsplit(
# remove all patterns "gps ref: "
str_remove_all(
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(x, "GPS Ref: [0-9]+;[0-9]+")
), "gps ref: "
), ";"
)
)
)
colnames(matches) <- c("easting", "northing")
matches
}
# new easting_northing function ------------------------------------------------------------
str(easting_northing(ex$name))
easting_northing <- function(x){
matches <- matrix(
unlist(
# split by ";" delimeter
strsplit(
# remove all patterns "gps ref: "
str_remove_all(
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(x, "GPS Ref: [0-9]+;[0-9]+")
), "gps ref: "
), ";"
)
), ncol=2, byrow=T
)
colnames(matches) <- c("easting", "northing")
matches
}
# new easting_northing function ------------------------------------------------------------
str(easting_northing(ex$name))
# new easting_northing function ------------------------------------------------------------
easting_northing(ex$name)
easting_northing <- function(x){
matches <- matrix(
#unlist(
# split by ";" delimeter
strsplit(
# remove all patterns "gps ref: "
str_remove_all(
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(x, "GPS Ref: [0-9]+;[0-9]+")
), "gps ref: "
), ";"
#)
), ncol=2, byrow=T
)
colnames(matches) <- c("easting", "northing")
matches
}
# new easting_northing function ------------------------------------------------------------
easting_northing(ex$name)
easting_northing <- function(x){
matches <-
# split by ";" delimeter
strsplit(
# remove all patterns "gps ref: "
str_remove_all(
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(x, "GPS Ref: [0-9]+;[0-9]+")
), "gps ref: "
), ";"
)
matches
}
# new easting_northing function ------------------------------------------------------------
easting_northing(ex$name)
# new easting_northing function ------------------------------------------------------------
str(easting_northing(ex$name))
easting_northing <- function(x){
matches <- unlist(
# split by ";" delimeter
strsplit(
# remove all patterns "gps ref: "
str_remove_all(
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(x, "GPS Ref: [0-9]+;[0-9]+")
), "gps ref: "
), ";"
)
)
matches
}
# new easting_northing function ------------------------------------------------------------
str(easting_northing(ex$name))
m <- regexpr("GPS Ref: [0-9]+;[0-9]+", ex$name, perl=T)
matches <- matrix(unlist(strsplit(sub("^.*: ", "", regmatches(ex$name, m)), ";")), ncol=2, byrow=T)
matches
m
matches
str(matches)
easting_northing <- function(x){
# remove all patterns "gps ref: "
str_remove_all(
#ensure output is lowered
tolower(
# extract all pattern matches, handles NAs gracefully
str_extract(x, "GPS Ref: [0-9]+;[0-9]+")
), "gps ref: "
)
}
# new easting_northing function ------------------------------------------------------------
str(easting_northing(ex$name))
eas_nor_split <- function(df, x){
df$x <- easting_northing(x)
str_split(string = df$x, pattern = ";", n = 2)
}
eas_nor_split(ex$name)
test <- ex
eas_nor_split(test, ex$name)
View(test)
test1 <- eas_nor_split(test, ex$name)
View(test1)
source('~/road-data-dump/notebooks/prep.R', echo=TRUE)
east_north_name <- easting_northing(sites$name)
site$east_north_name <- easting_northing(sites$name)
sites$east_north_name <- easting_northing(sites$name)
View(sites)
source('~/road-data-dump/notebooks/prep.R', echo=TRUE)
sites <- cbind(sites, easting_northing(sites$name))
View(sites)
# combine site info with readings, split into midas, tame, tmu files
# sensor reading -> sensor mapping
mapping <- match(readings$site_id, sites$id)
match(readings$site_id, sites$id)
?match
head(sites[mapping, -(1:3)])
gc()
readings <- cbind(readings, sites[mapping, -(1:3)])
readings[sample(1:nrow(readings), 10), ]
?fwrite
# outputs -----------------------------------------------------------------
# write this out and split by midas,tame,tmu later (need to free memory)
fwrite(readings, "../readings_combo.csv", quote=F, row.names=F)
colnames(readings)
type[1:10]
readings$type[1:10]
readings$status[1:10]
source('~/road-data-dump/notebooks/prep.R', echo=TRUE)
# 16501920       25
names(readings)
names(site.midas)
names(site.tame)
names(site.tmu)
library(packrat)
packrat::snapshot()
list.files(.libPaths())
packrat::disable()
packrat::init()
pacman::p_update()
source('~/road-data-dump/notebooks/prep.R', echo=TRUE)
names(readings)
packrat::init()
packrat::snapshot()
source('~/road-data-dump/notebooks/prep.R', echo=TRUE)
packrat::status()
packrat::init()
packrat::bundle()
source('~/road-data-dump/notebooks/prep.R', echo=TRUE)
source('~/road-data-dump/notebooks/prep.R', echo=TRUE)
source('~/road-data-dump/notebooks/prep.R', echo=TRUE)
names(readings)
Sys.info()[["machine"]]
source('~/road-data-dump/notebooks/prep.R', echo=TRUE)
source('~/road-data-dump/notebooks/prep.R', echo=TRUE)
#clean up leaving redaings only
remove(list = c("site.midas",
"site.tame",
"site.tmu",
"sites",
"mapping",
"direction",
"easting_northing"))
object.size(readings)
library(pryr)
?gc()
gc(verbose = TRUE,
rest = TRUE,
full = TRUE)
gc(verbose = TRUE,
reset = TRUE,
full = TRUE)
# outputs -----------------------------------------------------------------
# write this out and split by midas,tame,tmu later (need to free memory)
# fwrite(readings, "../readings_combo.csv", quote=F, row.names=F)
saveRDS(readings, "cache/readings_combo.rds", row.names=F)
# run the prep.R script
source("prep.R")
keep.cols <- ! colnames(x) %in% c("type", "status")
keep.cols <- ! colnames(x) %in% c("type", "status")
keep.cols <- ! colnames(readings) %in% c("type", "status")
keep.cols
names(readings)
midas <- readings[readings$type == "midas"]
tame <- readings[readings$type == "tame"]
tmu <- readings[readings$type == "tmu"]
rm(readings)
gc()
table(midas$type)
#read in the site_tame.csv
site.tame <- read.csv("../site_tame.csv", stringsAsFactor=F)
#create 'tame' label column
site.tame$type <- "tame"
View(site.tame)
# run the prep.R script
source("prep.R")
# run the prep.R script
source("prep.R")
# run the prep.R script
source("prep.R")
"Purpose of script: split files processed in prep.R by site"
# run the prep.R script
source("prep.R")
#split into midas,tame,tmu
# The below line was responsible for dropping the 2 named columns in the original code
# keep.cols <- ! colnames(readings) %in% c("type", "status")
midas <- readings[readings$type == "midas"]
tame <- readings[readings$type == "tame"]
tmu <- readings[readings$type == "tmu"]
rm(readings)
gc()
source('~/road-data-dump/notebooks/split.R', echo=TRUE)
install.packages("beepr")
library(beepr)
# sound alert when script completes
beep("mario")
# sound alert when script completes
beep("ready")
# sound alert when script completes
beep("coin")
# sound alert when script completes
beep("facebook")
# sound alert when script completes
beep("complete")
# sound alert when script completes
beep("fanfare")
# sound alert when script completes
beep("coin")
source('~/road-data-dump/notebooks/split.R', echo=TRUE)
