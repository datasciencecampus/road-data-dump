runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
?need
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
readrds("cache/user_email.rds")
readRDS("cache/user_email.rds")
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
readRDS("cache/test_run.rds")
runApp('app')
readRDS("cache/test_run.rds")
library(dplyr)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
readRDS("cache/start_date.rds")
runApp('app')
readRDS("cache/end_date.rds")
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
readRDS("cache/end_date.rds")
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
source('~/road-data-dump/src/run-me.R', echo=TRUE)
clear()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
library(shiny)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
install.packages("shinyjs")
library(shinyjs)
runApp('app')
?delay()
runApp('app')
clear()
runApp('app')
log4r::info(my_logger, message = "###################New Run#########################")
runApp('app')
runApp('app')
runApp('app')
runApp('app')
renv::status()
renv::snapshot()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
clear()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
start_date <- readRDS("cache/start_date.rds")
start_date
# incorrect format
end_date <- readRDS("cache/end_date.rds")
end_date
runApp('app')
readRDS("cache/start_date.rds")
# incorrect format
start_date <- readRDS("cache/start_date.rds")
start_date
# incorrect format
end_date <- readRDS("cache/end_date.rds")
end_date
runApp('app')
readRDS("cache/start_date.rds")
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
readRDS("cache/start_date.rds")
readRDS("cache/end_date.rds")
user_email <- readRDS("cache/user_Email.rds")
user_email
runApp('app')
user_email <- readRDS("cache/user_Email.rds")
user_email
test_run <- readRDS("cache/test_run.rds")
test_run
# Assign as TRUE for first run, script will query one site and one day. If it worked, you should hear
# a bleep. You can then set to FALSE for future runs. If it didn't work, check logs and Email
# richard.leyshon@ons.gov.uk
test_run <- TRUE
test_run
test_run <- as.logical(readRDS("cache/test_run.rds"))
test_run
test_run
runApp('app')
# read test status from cache, output by UI
test_run <- as.logical(readRDS("cache/test_run.rds"))
test_run
runApp('app')
# read test status from cache, output by UI
test_run <- as.logical(readRDS("cache/test_run.rds"))
test_run
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
clear()
source('~/road-data-dump/src/run-me.R', echo=TRUE)
file.exists(midas_filename)
(file.exists(tmu_filename))
head(midas, n = 10)
clear()
source('~/road-data-dump/src/run-me.R', echo=TRUE)
readRDS("cache/midas_head.rds")
file.exists("cache/midas_head.rds")
install.packages("delay")
install.packages("retry")
library(retry)
readRDS("../cache/midas_head.rds")
# read file
midas_head <- retry(readRDS("../cache/midas_head.rds"),upon = "cannot open the connection", max_tries = 3)
# read file
midas_head <- retry(readRDS("../cache/midas_head.rds"),when = "cannot open the connection", max_tries = 3)
# read file
midas_head <- retry(readRDS("/cache/midas_head.rds"),when = "cannot open the connection", max_tries = 3)
midas_head
readRDS("/cache/midas_head.rds")
readRDS("cache/midas_head.rds")
# read file
midas_head <- retry(readRDS("cache/midas_head.rds"),when = "cannot open the connection", max_tries = 3)
# delete file from cache
file.remove("cache/midas_head.rds")
# read file
midas_head <- retry(readRDS("cache/midas_head.rds"),when = "cannot open the connection", max_tries = 3)
rlang::last_error()
readRDS("cache/midas_head.rds")
rlang::last_error()
rlang::last_trace()
readRDS("cache/midas_head.rds")
rlang::last_error()
rlang::last_trace()
# read file
midas_head <- retry(readRDS("cache/midas_head.rds"),when = "error", max_tries = 3)
# read file
midas_head <- retry(readRDS("cache/midas_head.rds"),when = "cannot open the connection", max_tries = 3)
# read file
midas_head <- retry(readRDS("cache/midas_head.rds"),when = "cannot open compressed file", max_tries = 3)
# read file, retry at 5second intervals until present
midas_head <- retry(readRDS("cache/midas_head.rds"),
when = "cannot open the connection",
interval = 5,
max_tries = 3)
runApp('app')
runApp('app')
clear()
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
midas_head
clear()
runApp('app')
midas_head <- data.frame()
runApp('app')
midas_head
runApp('app')
runApp('app')
shiny::runApp('app')
midas_head
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
install.packages("shinybusy")
library(shinybusy)
runApp('app')
renv::status()
snapshot()
y
renv::snapshot()
renv::clean()
renv::status()
renv::snapshot()
renv::status()
shiny::runApp('app')
renv::status()
snapshot()
install.packages("shinystore")
shiny::runApp('app')
runApp('app')
runApp('testapp.R')
runApp('testapp.R')
runApp('testapp.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fieldsMandatory <- c("name", "favourite_pkg")
fieldsMandatory
runApp()
runApp()
runApp()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp()
runApp()
runApp()
runApp()
file.path(responsesDir, fileName)
responsesDir <- file.path("responses")
file.path(responsesDir, fileName)
fileName <- sprintf("%s_%s.csv",
Sys.time(),
digest::digest(data))
file = file.path(responsesDir, fileName)
file
saveData <- function(data) {
fileName <- sprintf("%s_%s.csv",
Sys.time(),
digest::digest(data))
write.csv(x = data, file = file.path(responsesDir, fileName),
row.names = FALSE, quote = TRUE)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('app')
runApp()
runApp()
runApp()
runApp('app')
runApp()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
source('~/road-data-dump/munge/17-write.R', echo=TRUE)
runApp('app')
runApp()
runApp('app')
runApp('app')
guide <- Cicerone$
new()$
step(
el = "Email",
title = "Input your Email.",
description = "Emails are sent to Highways England api along with the queries."
)$
step(
el = "testing",
title = "Are you testing the pipeline?",
description = "Testing queries 1 site ID only (siteID 2) for one day only (1st Sep 2017)."
)
guide
runApp('app')
shiny::runApp('app')
runApp('app')
source('~/road-data-dump/app/dependencies.R', echo=TRUE)
runApp('app')
renv::status()
renv::remove("shinyhelper")
renv::remove("stackoverflow")
renv::status()
renv::snapshot()
renv::status()
runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
source('~/road-data-dump/src/run-me.R', echo=TRUE)
runApp('app')
shiny::runApp('app')
runApp('app')
readRDS("../cache/midas_head.rds")
runApp('app')
clear()
runApp('app')
# write out head of midas -------------------------------------------------
# output head of MIDAS for presentation in UI
saveRDS(head(midas, n = 10), file = "app/data/midas_head.rds")
clear()
source('~/road-data-dump/src/run-me.R', echo=TRUE)
clear()
source('~/road-data-dump/src/run-me.R', echo=TRUE)
clear()
source('~/road-data-dump/src/run-me.R', echo=TRUE)
# label test run site reports by filename
if(test_run == TRUE){
report_name <- "test_site_report.html"
} else{
# if not testing pipeline, use date parameters in filename
report_name <- paste0("site_report_", dates_used, ".html")
}
report_name
# render the site report using the cached variables
rmarkdown::render("reports/site_report.Rmd",
output_file = report_name)
clear()
source('~/road-data-dump/src/run-me.R', echo=TRUE)
clear()
runApp('app')
midas_head
runApp('app')
file.exists("data/midas_head.rds"
)
runApp('app')
pipelinePckgs <- dplyr::setdiff(names(sessionInfo()$otherPkgs), c("shiny", "cicerone", "shinyjs", "shinybusy"))
lapply(pipelinePckgs, function(pkgs)
detach(
paste0('package:', pkgs),
character.only = T,
unload = T,
force = T
))
shiny::runApp('app')
runApp('app')
pipelinePckgs
runApp('app')
?strptime
strptime()
library(base)
pipelinePckgs <- dplyr::setdiff(names(sessionInfo()$otherPkgs), c("shiny", "cicerone", "shinyjs", "shinybusy"))
pipelinePckgs
runApp('app')
shiny::runApp('app')
runApp('app')
pipelinePckgs <- dplyr::setdiff(names(sessionInfo()$otherPkgs), c("shiny", "cicerone", "shinyjs", "shinybusy"))
pipelinePckgs
runApp('app')
pipelinePckgs <- dplyr::setdiff(names(sessionInfo()$otherPkgs), c("shiny", "cicerone", "shinyjs", "shinybusy"))
dplyr::setdiff()
library(dplyr)
pipelinePckgs <- dplyr::setdiff(names(sessionInfo()$otherPkgs), c("shiny", "cicerone", "shinyjs", "shinybusy"))
shiny::runApp('app')
clear()
runApp('app')
pipelinePckgs
runApp('app')
shiny::runApp('app')
runApp('app')
detach("DT", force = TRUE, detach = TRUE)
detach("DT", force = TRUE, unload = TRUE)
detach(DT, force = TRUE, unload = TRUE)
detach("package:DT", force = TRUE, unload = TRUE)
runApp('app')
detach("package:DT", force = TRUE, unload = TRUE, character.only = TRUE)
loadedNamespaces()
"DT" %in% loadedNamespaces()
runApp('app')
pipelinePckgs
source('~/road-data-dump/app/dependencies.R', echo=TRUE)
runApp('app')
pipelinePckgs
"rmarkdown" %in% pipelinePckgs
runApp('app')
pipelinePckgs
runApp('app')
"rlist" %in% pipelinePckgs
runApp('app')
shiny::runApp('app')
runApp('app')
?step()
?Cicerone::step()
runApp('app')
renv:status()
renv
renv::status()
renv::remove(stackoverflow)
renv::remove('stackoverflow')
renv::status()
shiny::runApp('app')
runApp('app')
file.exists("C:/Program Files/Google/Chrome/Application/chrome.exe")
runApp('app')
